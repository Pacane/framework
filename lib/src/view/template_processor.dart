part of bridge.view;

class TemplateProcessor {
  final Map<String, String> _scripts = {};

  Future include(String name,
                 String script,
                 {List<TemplatePreProcessor> preProcessors: const []}) async {
    script = (script == null) ? '' : script;
    for (var preProcessor in preProcessors)
      script = await preProcessor.process(script);
    _scripts[name] = script;
  }

  String get templateScript {
    var script = '''

@proxy
class Templates extends TemplateCollection {
  Map<String, TemplateGenerator> get templates => {
${_scripts.keys
    .map((name) => '    "$name": () async => new Template('
    'parsed: """${_scripts[name]}""", '
    'asHandlebars: """${_transformToHandlebars(_scripts[name])}""", '
    'data: data),')
    .join('\n')}
  };
}''';
    var dateString = new DateTime.now()
    .toString().replaceAll(new RegExp('[^0-9]'), '_');
    if (script.contains('Future'))
      script = 'import "dart:async";\n$script';
    script = 'import "package:bridge/view.dart";\n$script';
    script = 'library templates_$dateString;\n\n$script';
    script = '// THIS FILE WAS GENERATED BY bridge.view AND SHOULD NOT BE MODIFIED\n\n$script';
    return script;
  }

  String _transformToHandlebars(String template) {
    return template.replaceAllMapped(new RegExp(r'''(^|(?!\\).)\$(?:([A-Za-z_]\w+)|\{\s*([A-Za-z_]\w+)\s*\}|\{([^]*?)\})'''), (m) {
      if (m[4] != null) return m[0];
      return m[1] + '{{ ${m[2] != null ? m[2] : m[3]} }}';
    }).replaceAllMapped(new RegExp(r'\$\{await \$include\(([^]*?)\)\}'), (m) {
      return r'${(await $include(''${m[1]}'r')).asHandlebars}';
    });
  }
}